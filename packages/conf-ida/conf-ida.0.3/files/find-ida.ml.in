open Printf
open StdLabels

module Array = struct
  include Array

  let find t ~f =
    let length = length t in
    let rec loop i =
      if i >= length then None
      else if f t.(i) then Some t.(i)
      else loop (i + 1) in
    loop 0

  let find_map t ~f =
    let length = length t in
    let rec loop i =
      if i >= length then None
      else
        match f t.(i) with
        | None -> loop (i + 1)
        | Some _ as res -> res in
    loop 0
end

module List = struct
  include List

  let find_map xs ~f =
    let rec loop = function
      | [] -> None
      | hd :: tl ->
        match f hd with
        | None -> loop tl
        | x -> x in
    loop xs

end

let depth = 4


type sys =
  | MacOs
  | Linux
  | Other of string

let os = match "%{os}%" with
  | "macos" -> MacOs
  | "linux" -> Linux
  | s -> Other s

let (/) = Filename.concat

let getenv_opt var =
  try Some (Sys.getenv var)
  with Not_found -> None

let headless = os = Linux && getenv_opt "DISPLAY" = None

let input_all ch =
  let buf = Buffer.create 4096 in
  let rec read () = Buffer.add_channel buf ch 4096; read () in
  try read ()
  with End_of_file -> String.trim @@ Buffer.contents buf

let split_on_char sep s =
  let r = ref [] in
  let j = ref (String.length s) in
  for i = String.length s - 1 downto 0 do
    if s.[i] = sep then begin
      r := String.sub s (i + 1) (!j - i - 1) :: !r;
      j := i
    end
  done;
  String.sub s 0 !j :: !r

let split ~on str =
  List.map ~f:String.trim (split_on_char on str) |>
  List.filter ~f:(fun s -> s <> "")

exception Command_failed of Unix.process_status

let process_status_to_string s =
  let open Unix in
  match s with
  | WEXITED i -> sprintf "exit status %d" 1
  | WSTOPPED i -> sprintf "proccess was stopped by signal %d" i
  | WSIGNALED i -> sprintf "proccess was killed by signal %d" i

let exn_to_string = function
  | Command_failed s -> sprintf "%s" (process_status_to_string s)
  | e -> Printexc.to_string e

let run c =
  try
    let inp = Unix.open_process_in c in
    let res = input_all inp in
    match Unix.close_process_in inp with
    | Unix.WEXITED 0 -> Some res
    | s -> raise (Command_failed s)
  with e ->
    eprintf "command %s failed: %s\n" c (exn_to_string e);
    None

let cmd fmt = ksprintf run fmt

let rec first_success = function
  | [] -> None
  | f :: fs -> match f () with
    | None -> first_success fs
    | x -> x

let name64 x = x ^ "64"

let ida6 = "idaq"
let ida7 = "ida"
let idas = [ ida7; ida6; ]

let which name () = cmd "which %s" name

let which_ida64 () =
  first_success @@ List.map idas ~f:(fun ida -> which (name64 ida))

let is_dir x = Sys.file_exists x && Sys.is_directory x

let contains name path =
  Array.exists (Sys.readdir path) ~f:(fun file -> file = name)

let readdir path =
  try Sys.readdir path
  with Sys_error _ -> [| |]

let folders path =
  try
    Sys.readdir path |>
    Array.fold_left ~init:[] ~f:(fun acc p ->
        let path' = path / p in
        if is_dir path' then path' :: acc
        else acc)
  with Sys_error _ -> []

let find path tests =
  let rec loop n path =
    if n = depth then None
    else
      let dirs = folders path in
      List.find_map tests ~f:(fun test ->
          List.find_opt dirs ~f:test) |> function
      | Some p -> Some p
      | None -> List.find_map dirs ~f:(loop (n + 1)) in
  loop 0 path

let find_at_home () =
  match getenv_opt "HOME" with
  | None -> None
  | Some home ->
    find home @@
    List.map idas ~f:(fun ida -> contains (name64 ida))

let locate_linux () = find_at_home ()

let has_prefix str pref =
  let len = String.length pref in
  len <= String.length str &&
  String.(sub str 0 len = pref)

let is_app appname path =
  let name = Filename.basename path in
  Filename.check_suffix name ".app" &&
  has_prefix name appname

let find_app path tests () =
  match find path tests with
  | None -> None
  | Some path ->
    let path' = path / "Contents/MacOS/" in
    if Sys.file_exists path' then Some path'
    else None

let locate_macos () =
  let home = match getenv_opt "HOME" with
    | None -> ""
    | Some home -> home in
  let tests = List.fold_left idas ~init:[] ~f:(fun tests ida ->
      is_app ida :: is_app (name64 ida) :: tests) |> List.rev in
  first_success [
    find_app "/Applications" tests;
    find_app (home / "Applications") tests;
    find_app home tests;
  ]

let locate () =
  match os with
  | MacOs -> first_success [which_ida64; locate_macos]
  | Linux -> first_success [which_ida64; locate_linux]
  | Other system ->
    eprintf
      "warning: we don't know how to find programs on %s!\n" system;
    exit 1

let write path =
  let dir, file_depends =
    if Sys.is_directory path then path, ""
    else
      Filename.dirname path,
      sprintf "file-depends: [ [ %S %S ] ]\n"
        path (Digest.to_hex (Digest.file path)) in
  let oc = open_out "%{_:name}%.config" in
  fprintf oc {|
opam-version: "2.0"
%s
variables {
  path: %S
  headless: %b
}
|} file_depends dir headless;
  close_out oc

let of_config () =
  let path = "%{ida-path}%" in
  if path = "" then None
  else Some path

let of_env () = getenv_opt "IDA_PATH"

let () =
  try
    match first_success [ of_config; of_env; locate; ] with
    | Some path -> write path
    | None ->
      eprintf "failed to locate IDA Pro\n";
      exit 1
  with e ->
    eprintf "build failed: %s\n" (Printexc.to_string e);
    exit 1
